{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n\n// const MapPage = () => {\n//   const [map, setMap] = useState(null);\n//   const [keyword, setKeyword] = useState('');\n//   const [searchResult, setSearchResult] = useState([]);\n//   const [currentLatLon, setCurrentLatLon] = useState({\n//     lat: 37.4812845080678,\n//     lon: 126.952713197762\n//   });\n\n//   useEffect(() => {\n//     const script = document.createElement('script');\n//     script.src =\n//       'https://dapi.kakao.com/v2/maps/sdk.js?appkey=0560729fbda53d06035a69b6f812c484&libraries=services';\n//     script.async = true;\n//     document.body.appendChild(script);\n\n//     script.onload = () => {\n//       initializeMap();\n//     };\n\n//     return () => {\n//       document.body.removeChild(script);\n//     };\n//   }, []);\n\n//   const initializeMap = () => {\n//     /* global kakao */\n//     const mapOption = {\n//       center: new kakao.maps.LatLng(37.297764, 127.069340),\n//       level: 3\n//     };\n\n//     const map = new kakao.maps.Map(document.getElementById('map'), mapOption);\n//     setMap(map);\n//     currentLocation(map);\n//   };\n\n//   const currentLocation = (map) => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(function (position) {\n//         const lat = position.coords.latitude;\n//         const lon = position.coords.longitude;\n//         const locPosition = new kakao.maps.LatLng(lat, lon);\n//         const message = '<div style=\"padding:5px;\">현위치</div>';\n//         displayMarker(map, locPosition, message);\n//         setCurrentLatLon({ lat, lon });\n//       });\n//     } else {\n//       const locPosition = new kakao.maps.LatLng(\n//         currentLatLon.lat,\n//         currentLatLon.lon\n//       );\n//       const message = '현재 위치를 알 수 없어 기본 위치로 이동합니다.';\n//       displayMarker(map, locPosition, message);\n//     }\n//   };\n\n//   const displayMarker = (map, locPosition, message) => {\n//     const imageSize = new kakao.maps.Size(24, 35);\n//     const markerImage = new kakao.maps.MarkerImage(\n//       'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png',\n//       imageSize\n//     );\n\n//     const marker = new window.kakao.maps.Marker({\n//       map: map,\n//       position: locPosition,\n//       image: markerImage\n//     });\n\n//     const infowindow = new window.kakao.maps.InfoWindow({\n//       content: message,\n//       removable: true\n//     });\n\n//     infowindow.open(map, marker);\n//     map.setCenter(locPosition);\n//   };\n\n//   const searchPlaces = () => {\n//     if (!keyword.trim()) {\n//       alert('키워드를 입력해주세요.');\n//       return;\n//     }\n\n//     const ps = new window.kakao.maps.services.Places();\n//     ps.keywordSearch(keyword, placesSearchCB);\n//   };\n\n//   const placesSearchCB = (data, status, pagination) => {\n//     if (status === window.kakao.maps.services.Status.OK) {\n//       displayPlaces(data);\n//       displayPagination(pagination);\n//     } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\n//       setSearchResult([]);\n//       alert('검색 결과가 존재하지 않습니다.');\n//     } else if (status === window.kakao.maps.services.Status.ERROR) {\n//       setSearchResult([]);\n//       alert('검색 결과 중 오류가 발생했습니다.');\n//     }\n//   };\n\n//   const displayPlaces = (places) => {\n//     setSearchResult(places);\n//     const bounds = new window.kakao.maps.LatLngBounds();\n\n//     places.forEach((place) => {\n//       const placePosition = new window.kakao.maps.LatLng(place.y, place.x);\n//       bounds.extend(placePosition);\n//     });\n\n//     map.setBounds(bounds);\n//   };\n\n//   const displayPagination = (pagination) => {\n//     // 페이징 처리 구현 (생략)\n//   };\n\n//   return (\n//     <div className=\"map_wrap\">\n//       <div id=\"map\" style={{ width: '100%', height: '600px', position: 'relative', overflow: 'hidden' }}></div>\n//       <div id=\"menu_wrap\" className=\"bg_white\">\n//         <div className=\"option\">\n//           <div>\n//             <form onSubmit={searchPlaces}>\n//               <input type=\"text\" placeholder=\"키워드\" value={keyword} onChange={(e) => setKeyword(e.target.value)} />\n//               <button type=\"submit\">검색</button>\n//             </form>\n//           </div>\n//         </div>\n//         <hr />\n//         <ul>\n//           {searchResult.map((place, index) => (\n//             <li key={index}>\n//               <span className={`markerbg marker_${index + 1}`}></span>\n//               <div className=\"info\">\n//                 <h5>{place.place_name}</h5>\n//                 {place.road_address_name ? (\n//                   <div>\n//                     <span>{place.road_address_name}</span>\n//                     <span className=\"jibun gray\">{place.address_name}</span>\n//                   </div>\n//                 ) : (\n//                   <span>{place.address_name}</span>\n//                 )}\n//                 <span className=\"tel\">{place.phone}</span>\n//               </div>\n//             </li>\n//           ))}\n//         </ul>\n//         <div id=\"pagination\"></div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default MapPage;\n\n// // import React, { useEffect, useState } from 'react';\n\n// // // ① 클릭 시 움직이는 마커 배열 = clickDynamicMarkers (내가 원하는 곳 클릭하기)\n// // // ② 검색 시 정해진 음식점 마커 배열 = searchStaticMarkers (고정적으로 값 뜨게 하기)\n\n// // const MapPage = () => {\n// //     const [searchStaticMarkers, setSearchStaticMarkers] = useState([]);\n// //     const [centerMarker, setCenterMarker] = useState(null); // Center marker state\n// //     const [searchKeyword, setSearchKeyword] = useState(''); // 검색어 상태 추가\n// //     let kakao; // kakao 변수를 전역으로 정의\n\n// //     // 검색 결과를 표시하기 전에 기존 마커들을 지도에서 제거하는 함수를 정의합니다.\n// //     const removeSearchStaticMarkers = () => {\n// //         searchStaticMarkers.forEach((marker) => marker.setMap(null));\n// //         setSearchStaticMarkers([]);\n// //     };\n\n// //     useEffect(() => {\n// //         // 카카오 맵 API 스크립트를 동적으로 불러옵니다\n// //         const script = document.createElement('script');\n// //         script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=0560729fbda53d06035a69b6f812c484&libraries=services';\n// //         script.async = true;\n// //         document.body.appendChild(script);\n\n// //         script.onload = () => {\n// //             // 카카오 맵 API 스크립트가 로드되면, 지도를 초기화합니다\n// //             initializeMap();\n// //         };\n\n// //         // 컴포넌트 언마운트 시 스크립트 정리(clean-up)\n// //         return () => {\n// //             document.body.removeChild(script);\n// //         };\n// //     }, []);\n\n// //     const initializeMap = () => {\n// //         // kakao 변수에 카카오 맵 API를 할당\n// //         kakao = window.kakao;\n\n// //         // 초기 지도 설정\n// //         const mapOption = {\n// //             center: new kakao.maps.LatLng(37.297764, 127.069340),\n// //             level: 4\n// //         };\n\n// //         // 지도 생성\n// //         const map = new kakao.maps.Map(document.getElementById('map'), mapOption);\n\n// //         // 마커 생성\n// //         const centerMarker = new kakao.maps.Marker({\n// //             position: map.getCenter()\n// //         });\n\n// //         // 마커 지도에 표시\n// //         centerMarker.setMap(map);\n\n// //         // 클릭 이벤트 등록\n// //         kakao.maps.event.addListener(map, 'click', function(mouseEvent) {\n// //             const latlng = mouseEvent.latLng;\n// //             centerMarker.setPosition(latlng);\n// //             // 클릭한 위도, 경도 정보를 가져옵니다\n// //             const lat = latlng.getLat();\n// //             const lng = latlng.getLng();\n// //             // 클릭한 위치 정보 표시\n// //             const clickDynamicMarkers = document.getElementById('click_dynamic_markers');\n// //             clickDynamicMarkers.innerHTML = `클릭 위치: 위도 ${lat}, 경도 ${lng}`;\n// //         });\n\n// //         // CenterMarker 상태 업데이트\n// //         setCenterMarker(centerMarker);\n// //     };\n\n// //     // 검색어 입력을 처리하는 함수\n// //     const handleKeywordChange = (event) => {\n// //         setSearchKeyword(event.target.value);\n// //     };\n\n// //     // 검색 함수 정의\n// //     const searchPlaces = () => {\n// //         const keyword = searchKeyword;\n// //         // const keyword = document.getElementById('map_keyword').value;\n// //         // 장소 검색 API 호출\n// //         kakao.maps.services.places.keywordSearch(keyword, (result, status) => {\n// //             if (status === kakao.maps.services.Status.OK) {\n// //                 // 검색 결과를 표시하기 전에 기존 마커들을 지도에서 제거합니다.\n// //                 removeSearchStaticMarkers();\n\n// //                 // 새로운 검색 결과를 표시합니다.\n// //                 displayPlaces(result);\n// //             } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n// //                 alert('검색 결과가 없습니다.');\n// //             } else if (status === kakao.maps.services.Status.ERROR) {\n// //                 alert('검색 결과 중 오류가 발생했습니다.');\n// //             }\n// //         });\n// //     };\n\n// //     const displayPlaces = (places) => {\n// //          // 검색 결과를 표시할 요소를 가져옵니다.\n// //         const placesList = document.getElementById('places_list');\n\n// //         // 요소가 존재하지 않는다면 함수를 종료합니다.\n// //         if (!placesList) {\n// //             return;\n// //         }\n\n// //         // 검색 결과로 받아온 places 배열을 활용하여 마커와 검색 결과 목록을 생성합니다.\n// //         const map = centerMarker.getMap();\n// //         const bounds = new kakao.maps.LatLngBounds();\n\n// //         places.forEach((place) => {\n// //             const marker = new kakao.maps.Marker({\n// //             position: new kakao.maps.LatLng(place.y, place.x),\n// //         });\n\n// //         marker.setMap(map);\n\n// //         // 새로운 마커들을 searchStaticMarkers 배열에 추가합니다.\n// //         setSearchStaticMarkers((prevMarkers) => [...prevMarkers, marker]);\n\n// //         // 검색 결과 목록을 생성하여 places_list에 추가합니다.\n// //         const item = document.createElement('li');\n// //         const title = document.createElement('h5');\n// //         const info = document.createElement('p');\n// //         title.textContent = place.place_name;\n// //         info.textContent = place.address_name;\n// //         item.appendChild(title);\n// //         item.appendChild(info);\n// //         item.addEventListener('click', () => {\n// //             map.panTo(new kakao.maps.LatLng(place.y, place.x));\n// //         });\n// //         document.getElementById('places_list').appendChild(item);\n\n// //         bounds.extend(new kakao.maps.LatLng(place.y, place.x));\n// //     });\n\n// //         // 검색 결과로 받아온 장소들이 모두 표시될 수 있도록 지도의 확대, 이동 조정\n// //         map.setBounds(bounds);\n// //     };\n\n// //     return (\n// //         <div className=\"map_wrap\">\n// //             <style>\n// //             {`\n// //                 .map_wrap,\n// //                 .map_wrap * {\n// //                     margin:0;\n// //                     padding:0;\n// //                     font-family:'Malgun Gothic', dotum,'돋움', sans-serif;\n// //                     font-size:12px;\n// //                 }\n\n// //                 .map_wrap a,\n// //                 .map_wrap a:hover,\n// //                 .map_wrap a:active {\n// //                     color: #cacaca;;\n// //                     text-decoration: none;\n// //                 }\n\n// //                 .map_wrap {\n// //                     position:relative;\n// //                     width:100%;\n// //                     height:800px;\n// //                 }\n\n// //                 #map_keyword {\n// //                     width: 100px;\n// //                     height: 20px;\n// //                     padding: 10px;\n// //                     font-size: 12px;\n// //                     border: 1px solid #ccc;\n// //                     border-radius: 5px;\n// //                 }\n\n// //                 #menu_wrap {\n// //                     position:absolute;\n// //                     top:0;\n// //                     left:0;\n// //                     bottom:0;\n// //                     width:250px;\n// //                     margin:10px 0 30px 10px;\n// //                     padding:5px;\n// //                     overflow-y:auto;\n// //                     background:rgba(255, 255, 255, 0.7);\n// //                     z-index: 1;\n// //                     font-size:12px;\n// //                     border-radius: 10px;\n// //                 }\n\n// //                 .bg_white {\n// //                     background:#fff;\n// //                 }\n\n// //                 #menu_wrap hr {\n// //                     display: block;\n// //                     height: 1px;\n// //                     border: 0;\n// //                     border-top: 2px solid #5F5F5F;\n// //                     margin:3px 0;\n// //                 }\n\n// //                 #menu_wrap .option{\n// //                     position: relative;\n// //                     text-align: center;\n// //                 }\n\n// //                 #menu_wrap .option p {\n// //                     margin:10px 0;\n// //                 }\n\n// //                 #menu_wrap .option button {\n// //                     margin: 2px, 3px, 2px, 5px;\n// //                     padding: 10px 10px 10px 10px;\n// //                     background-color: #ff6480;\n// //                     color: #ffffff;\n// //                     border: none;\n// //                     border-radius: 3px;\n// //                     cursor: pointer;\n// //                 }\n\n// //                 #menu_wrap .option button:hover {\n// //                     background-color: #c28175;\n// //                 }\n\n// //                 #places_list li {\n// //                     list-style: none;\n// //                 }\n\n// //                 #places_list .item {\n// //                     position:relative;\n// //                     border-bottom:1px solid #888;\n// //                     overflow: hidden;\n// //                     cursor: pointer;\n// //                     min-height: 65px;\n// //                 }\n\n// //                 #places_list .item span {\n// //                     display: block;\n// //                     margin-top:4px;\n// //                 }\n\n// //                 #places_list .item h5, #places_list .item .info {\n// //                     text-overflow: ellipsis;\n// //                     overflow: hidden;\n// //                     white-space: nowrap;\n// //                 }\n\n// //                 #places_list .item .info{\n// //                     padding:10px 0 10px 55px;\n// //                 }\n\n// //                 #places_list .info .gray {\n// //                     color:#8a8a8a;\n// //                 }\n\n// //                 #places_list .info .jibun {\n// //                     padding-left:26px;\n// //                     background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;\n// //                 }\n\n// //                 #places_list .info .tel {\n// //                     color:#009900;\n// //                 }\n\n// //                 #places_list .item .markerbg {\n// //                     float:left;\n// //                     position:absolute;\n// //                     width:36px;\n// //                     height:37px;\n// //                     margin:10px 0 0 10px;\n// //                     background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png) no-repeat;\n// //                 }\n\n// //                 #places_list .item .marker_1 {\n// //                     background-position: 0 -10px;\n// //                 }\n\n// //                 #places_list .item .marker_2 {\n// //                     background-position: 0 -56px;\n// //                 }\n\n// //                 #places_list .item .marker_3 {\n// //                     background-position: 0 -102px\n// //                 }\n\n// //                 #places_list .item .marker_4 {\n// //                     background-position: 0 -148px;\n// //                 }\n\n// //                 #places_list .item .marker_5 {\n// //                     background-position: 0 -194px;\n// //                 }\n\n// //                 #places_list .item .marker_6 {\n// //                     background-position: 0 -240px;\n// //                 }\n\n// //                 #places_list .item .marker_7 {\n// //                     background-position: 0 -286px;\n// //                 }\n\n// //                 #places_list .item .marker_8 {\n// //                     background-position: 0 -332px;\n// //                 }\n\n// //                 #places_list .item .marker_9 {\n// //                     background-position: 0 -378px;\n// //                 }\n\n// //                 #places_list .item .marker_10 {\n// //                     background-position: 0 -423px;\n// //                 }\n\n// //                 #places_list .item .marker_11 {\n// //                     background-position: 0 -470px;\n// //                 }\n\n// //                 #places_list .item .marker_12 {\n// //                     background-position: 0 -516px;\n// //                 }\n\n// //                 #places_list .item .marker_13 {\n// //                     background-position: 0 -562px;\n// //                 }\n\n// //                 #places_list .item .marker_14 {\n// //                     background-position: 0 -608px;\n// //                 }\n\n// //                 #places_list .item .marker_15 {\n// //                     background-position: 0 -654px;\n// //                 }\n\n// //                 #pagination {\n// //                     margin:10px auto;text-align: center;\n// //                 }\n\n// //                 #pagination a {\n// //                     display:inline-block;margin-right:10px;\n// //                 }\n\n// //                 #pagination .on {\n// //                     font-weight: bold; cursor: default;color:#777;\n// //                 }\n// //                 `}\n// //         </style>\n// //         <div id=\"map\" style={{ width: '100%', height: '600px', position: 'relative', overflow: 'hidden' }}></div>\n// //             <div id=\"menu_wrap\" className=\"bg_white\">\n// //                 <div className=\"option\">\n// //                     <div>\n// //                         <div id=\"click_dynamic_markers\"></div>\n// //                         <form onSubmit={searchPlaces}>\n// //                             <input type=\"text\" placeholder=\"키워드\" id=\"map_keyword\" size=\"15\" value={searchKeyword} onChange={handleKeywordChange} />\n// //                             <button type=\"submit\">검색</button>\n// //                         </form>\n// //                     </div>\n// //                 </div>\n// //                 <hr />\n// //                 <ul id=\"places_list\"></ul>\n// //                 <div id=\"pagination\"></div>\n// //             </div>\n// //         </div>\n// //     );\n// // };\n\n// // export default MapPage;\n\n/////////////////////////////////////////////////////////////\n\n// import { configureStore, createSlice } from '@reduxjs/toolkit';\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useNavigate, Link } from 'react-router-dom';\n// import LeftPart from './LeftPart';\n\n// const historyKeywordsAddDelete = createSlice({\n//     name: 'historyKeywords',\n//     initialState: [],\n//     reducers: {\n//       addKeyword: (state, action) => {\n//         state.push(action.payload);\n//       },\n//       deleteAllKeywords: (state) => {\n//         state.length = 0;\n//       },\n//       deleteOneKeyword: (state, action) => {\n//         return state.filter((keyword) => keyword !== action.payload);\n//       },\n//     },\n//   });\n\n//   export const { addKeyword, deleteAllKeywords, deleteOneKeyword } = historyKeywordsAddDelete.actions;\n\n//   const historyKeywordsReducer = historyKeywordsAddDelete.reducer;\n\n//   const store = configureStore({\n//     reducer: {\n//       historyKeywords: historyKeywordsReducer,\n//     },\n//   });\n\n// // MainPage는 크게 세 부분으로 나뉨\n// // LeftPart는 Left.js에 있으며, 왼쪽 사이드 바를 의미함\n// // MiddlePart는 여기 App.js에 있으며, Flavor 로고와 검색 창(기록까지)을 묶어놓은 것을 의미함\n// // RightPart도 여기 App.js에 있으며, 로그인 & 회원가입 버튼과 스위치 버튼을 함께 묶어놓은 것을 의미함\n\n// function MainPage() {\n//     const recentSearchBoxStyle = `\n//       .no_recent_search {\n//         /* \"최신 검색어가 없습니다.\" 메시지에 대한 커스텀 스타일 */\n//         display: flex;\n//         justify-content: center;\n//         align-items: center;\n//         height: 100px; /* 필요에 따라 높이를 조정하세요 */\n//         font-size: 20px; /* 필요에 따라 폰트 크기를 조정하세요 */\n//         color: gray; /* 필요에 따라 색상을 조정하세요 */\n//       }\n\n//       .main_keyword_button {\n//         position: absolute;\n//         bottom: -200px;\n//         left: 50%;\n//         transform: translateX(-50%);\n//       }\n//     `;\n\n//     const [isSwitchChecked, setSwitchChecked] = useState(false);\n//     const [showPopup, setShowPopup] = useState(false);\n//     const [map, setMap] = useState(null);\n\n//     const navigate = useNavigate();\n\n//     // const [isSearchBoxVisible, setSearchBoxVisible] = useState(false);\n\n//     // const toggleSearchBox = () => {\n//     //   setSearchBoxVisible(!isSearchBoxVisible);\n//     // };\n\n//     const handleSwitchToggle = () => {\n//       setSwitchChecked(!isSwitchChecked);\n//       if (!isSwitchChecked) {\n//         // requestUserLocation();\n//         setShowPopup(true);\n//       }\n//     };\n\n//     // 팝업창에서 지도를 생성하는 함수\n//     const createMapInPopup = () => {\n//       // Kakao Maps 스크립트를 동적으로 로드\n//       const script = document.createElement('script');\n//       script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=YOUR_KAKAO_MAPS_APP_KEY';\n//       script.async = true;\n//       script.onload = () => {\n//         const mapOptions = {\n//           center: new window.kakao.maps.LatLng(37.5662952, 126.9779451), // 초기 지도 중심 좌표\n//           level: 3, // 초기 줌 레벨\n//         };\n\n//         // 지도를 생성하고 팝업 내에 추가\n//         const mapInstance = new window.kakao.maps.Map(\n//           document.getElementById('popup_map'), // 팝업 내에 지도를 표시할 DOM 요소\n//           mapOptions\n//         );\n//         setMap(mapInstance);\n//       };\n//       document.head.appendChild(script);\n//     };\n\n//     useEffect(() => {\n//       createMapInPopup();\n//     }, []);\n\n//     // 위치 정보를 가져오고 지도의 중심을 사용자의 위치로 이동\n//     // const requestUserLocation = () => {\n//     //   if (navigator.geolocation && map !== null) {\n//     //     navigator.geolocation.getCurrentPosition(\n//     //       function (position) {\n//     //         const latitude = position.coords.latitude;\n//     //         const longitude = position.coords.longitude;\n\n//     //         // 사용자의 위치로 지도의 중심을 설정\n//     //         map.setCenter(new window.kakao.maps.LatLng(latitude, longitude));\n\n//     //         // 사용자의 위치를 표시하는 마커를 추가할 수도 있습니다\n//     //         const userMarker = new window.kakao.maps.Marker({\n//     //           position: new window.kakao.maps.LatLng(latitude, longitude),\n//     //           map: map,\n//     //           image: new window.kakao.maps.MarkerImage(\n//     //             '사용자 마커 이미지 URL',\n//     //             new window.kakao.maps.Size(24, 35),\n//     //             {\n//     //               offset: new window.kakao.maps.Point(12, 35),\n//     //             }\n//     //           ),\n//     //         });\n\n//     //         // 위도와 경도를 필요에 따라 사용합니다.\n//     //         console.log(`사용자 위치: 위도 ${latitude}, 경도 ${longitude}`);\n//     //       },\n//     //       function (error) {\n//     //         console.error('사용자 위치 가져오기 오류:', error.message);\n//     //       }\n//     //     );\n//     //   } else {\n//     //     console.error('귀하의 브라우저에서 Geolocation이 지원되지 않습니다.');\n//     //   }\n//     // };\n\n//     const popupAgreeClick = () => {\n//       // requestUserLocation();\n//       setShowPopup(false);\n//       setSwitchChecked(true);\n//     };\n\n//     const popupDisagreeClick = () => {\n//       setShowPopup(false);\n//       setSwitchChecked(false);\n//     };\n\n//     const setRandomFood = () => {\n//       var foods = [\"초밥\", \"돈까스\", \"냉모밀\", \"마라탕\", \"삼계탕\", \"치킨\", \"피자\", \"짜장면\", \"짬뽕\", \"탕수육\", \"떡볶이\", \"김치찌개\", \"부대찌개\", \"순두부찌개\", \"삼겹살\",\n//       \"쫄면\", \"덮밥\", \"국수\", \"냉면\", \"곱창\", \"닭발\", \"족발\", \"보쌈\", \"스파게티\", \"스파게티\", \"찜닭\", \"갈비\", \"국밥\", \"제육볶음\", \"오징어볶음\", \"라면\", \"햄버거\", \"샌드위치\",\n//       \"샐러드\", \"카레\", \"비빔밥\", \"김밥\"];\n//       var randomIndex = Math.floor(Math.random()*foods.length);\n//       var inputField = document.getElementById(\"randomFood\");\n//       inputField.setAttribute(\"placeholder\", \"오늘의 추천 메뉴는 \" + foods[randomIndex] + \"입니다!\");\n//     };\n\n//     const [keyword, setKeyword] = useState('');\n//     const historyKeywords = useSelector((state) => state.historyKeywords);\n//     // const [searchListHeight, setSearchListHeight] = useState(0); // 검색어 목록 높이 상태 추가\n\n//     const dispatch = useDispatch();\n\n//     const handleKeywordChange = (event) => {\n//       setKeyword(event.target.value);\n//     };\n\n//     function handleKeywordSubmit() {\n//       if (keyword.trim() !== '') {\n//         dispatch(addKeyword(keyword));\n//         setKeyword('');\n//       }\n//     };\n\n//     const handleDeleteAllKeywords = () => {\n//       dispatch(deleteAllKeywords());\n//     };\n\n//     const handleDeleteOneKeyword = (keyword) => {\n//       dispatch(deleteOneKeyword(keyword));\n//     };\n\n//     // const renderSearchBox = () => {\n//     //   if (isSwitchChecked && isSearchBoxVisible) {\n//     //     return (\n//     //       <div className=\"search_box_container\">\n//     //         <input type=\"text\" className=\"search_box\" id=\"randomFood\" autoComplete=\"off\" value={keyword} onChange={handleKeywordChange} onKeyUp={(event) => {\n//     //             if (event.key === 'Enter' || event.target.classList.contains('search_icon')) {\n//     //               handleKeywordSubmit();\n//     //             }\n//     //           }}\n//     //         />\n//     //         <ul className=\"keyword_list\" style={{ maxHeight: `${searchListHeight}px` }}>\n//     //           {historyKeywords.map((keyword) => (\n//     //             <li key={keyword}>{keyword}</li>\n//     //           ))}\n//     //         </ul>\n//     //       </div>\n//     //     );\n//     //   }\n//     //   return null;\n//     // };\n\n//     const render = () => {\n//       if (historyKeywords.length > 0) {\n//         const recentKeywords = historyKeywords.slice(-10).reverse();\n//         return (\n//           <ul>\n//             {recentKeywords.map((keyword) => (\n//               <li key={keyword}>\n//                 {keyword} <button onClick={() => handleDeleteOneKeyword(keyword)}>x</button>\n//               </li>\n//             ))}\n//             {keyword.trim() !== '' && (\n//               <li>\n//                 {keyword} <button onClick={addKeywordToList}>x</button>\n//               </li>\n//             )}\n//           </ul>\n//         );\n//       } else {\n//         return (\n//           <p className=\"no_recent_search\">최신 검색어가 없습니다.</p>\n//         );\n//       }\n//     };\n\n//     // 검색어 추가 함수\n//     const addKeywordToList = () => {\n//       if (keyword.trim() !== '') {\n//         dispatch(addKeyword(keyword));\n//         setKeyword('');\n//       }\n//     };\n\n//     const handleMainPageButtonClick = () => {\n//       navigate('/keywordrecom');\n//     }\n\n//     return (\n//       <div>\n//         <head>\n//           <meta charSet=\"UTF-8\" />\n//           <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\n//           <title> 메인 화면 </title>\n//           <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+KR:100,300,400,500,700,900&display=swap\" rel=\"stylesheet\" />\n//           <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\n//           <style>{recentSearchBoxStyle}</style>\n//         </head>\n//         <body onLoad={setRandomFood}>\n//           <LeftPart/>\n//           {/* 메인 페이지의 로고, 검색 창 부분 */}\n//           <div className=\"middle_part\">\n//             {/* 로고 */}\n//             <button type=\"flavor_logo\" className=\"flavor_logo\">\n//               <img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FNCkp7%2Fbtshz0iU8wZ%2FGdartd1kgTj0ZXMhJ0IKwk%2Fimg.png\" width=\"415\" height=\"140\" />\n//             </button>\n//             {/* 검색 부분 묶음 */}\n//             <div className=\"search_part\">\n//               {/* 검색창 */}\n//               <div className=\"search\" id=\"search\">\n//                 <input type=\"text\" className=\"search_box\" id=\"randomFood\" autoComplete=\"off\" value={keyword} onChange={handleKeywordChange} onKeyUp={(event) => {\n//                   if (event.key === 'Enter' || event.target.classList.contains('search_icon')) {\n//                     handleKeywordSubmit();\n//                   }\n//                 }}/>\n//                 {/* <div className=\"real_search_box\" style={{ display: isSwitchChecked ? 'block' : 'none' }}> */}\n//                   {/* 실제 검색 창 내용 */}\n//                   {/* <input type=\"text\" className=\"search_box\" id=\"randomFood\" autoComplete=\"off\" value={keyword} onChange={handleKeywordChange}\n//                     onKeyUp={(event) => {\n//                       if (event.key === 'Enter' || event.target.classList.contains('search_icon')) {\n//                         handleKeywordSubmit();\n//                       }\n//                     }}\n//                   />\n//                 </div> */}\n//                 <button type=\"button\" className=\"search_icon\" onClick={handleKeywordSubmit}>\n//                   <img src=\"https://cdn.icon-icons.com/icons2/1302/PNG/512/magnifyingglassbrowser_85768.png\" className=\"srh_btn\" width=\"24px\" height=\"24px\" />\n//                 </button>\n//               </div>\n//             </div>\n//             <div className=\"search_list\">\n//               {/* 추천 검색어 */}\n//               <div className=\"suggested_search\" id=\"suggested_search\"></div>\n//               {/* 최신 검색어 */}\n//               {render()}\n//             </div>\n//             {/* 검색어 모두 지우기 */}\n//             <div className=\"delete\">\n//               <button type=\"button\" className=\"all_delete\" onClick={handleDeleteAllKeywords}>모두 지우기</button>\n//               <button type=\"button\" className=\"keyword_delete\" onClick={handleDeleteOneKeyword}></button>\n//             </div>\n//           </div>\n//           <div className=\"main_button\">\n//             <button className=\"main_keyword_button\" onClick={handleMainPageButtonClick}>중앙 버튼</button>\n//           </div>\n//           {/* 메인 페이지의 스위치, 로그인, 회원가입 부분 */}\n//           <div className=\"right_part\">\n//             {/* 스위치 */}\n//             <div className=\"switch\">\n//               <input type=\"checkbox\" id=\"sw_btn\" checked={isSwitchChecked} onClick={handleSwitchToggle} />\n//               <label htmlFor=\"sw_btn\" className=\"switch_label\">\n//                 <span className=\"onf_btn\"></span>\n//               </label>\n//             </div>\n//             <ul className=\"login_and_register\">\n//               <li><Link to=\"/login\" className=\"lar\">로그인</Link></li>\n//               <li><Link to=\"/signup\" className=\"lar\">회원가입</Link></li>\n//             </ul>\n//           </div>\n//           {/* 위치 수신 동의 팝업창 */}\n//           {showPopup && (\n//             <div className=\"popup_box\" id=\"popup_box\">\n//               {/* 팝업창 내용 */}\n//               <div className=\"popup_content\">\n//                 <div className=\"popup_text\">'Flavor'이 사용자의 위치에 접근하도록 허용하시겠습니까?</div>\n//                 <div className=\"mini_map\" id=\"mini_map\"></div>\n//                 <div className=\"popup_actions\">\n//                   <button className=\"popup_agree\" onClick={popupAgreeClick}>허용</button>\n//                   <button className=\"popup_disagree\" onClick={popupDisagreeClick}>비허용</button>\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n//         </body>\n//       </div>\n//     );\n//   }\n\n//   export default MainPage;","map":{"version":3,"names":[],"sources":["C:/CD_REACT/flavor/flavor/src/MapPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n\r\n// const MapPage = () => {\r\n//   const [map, setMap] = useState(null);\r\n//   const [keyword, setKeyword] = useState('');\r\n//   const [searchResult, setSearchResult] = useState([]);\r\n//   const [currentLatLon, setCurrentLatLon] = useState({\r\n//     lat: 37.4812845080678,\r\n//     lon: 126.952713197762\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const script = document.createElement('script');\r\n//     script.src =\r\n//       'https://dapi.kakao.com/v2/maps/sdk.js?appkey=0560729fbda53d06035a69b6f812c484&libraries=services';\r\n//     script.async = true;\r\n//     document.body.appendChild(script);\r\n\r\n//     script.onload = () => {\r\n//       initializeMap();\r\n//     };\r\n\r\n//     return () => {\r\n//       document.body.removeChild(script);\r\n//     };\r\n//   }, []);\r\n\r\n//   const initializeMap = () => {\r\n//     /* global kakao */\r\n//     const mapOption = {\r\n//       center: new kakao.maps.LatLng(37.297764, 127.069340),\r\n//       level: 3\r\n//     };\r\n\r\n//     const map = new kakao.maps.Map(document.getElementById('map'), mapOption);\r\n//     setMap(map);\r\n//     currentLocation(map);\r\n//   };\r\n\r\n//   const currentLocation = (map) => {\r\n//     if (navigator.geolocation) {\r\n//       navigator.geolocation.getCurrentPosition(function (position) {\r\n//         const lat = position.coords.latitude;\r\n//         const lon = position.coords.longitude;\r\n//         const locPosition = new kakao.maps.LatLng(lat, lon);\r\n//         const message = '<div style=\"padding:5px;\">현위치</div>';\r\n//         displayMarker(map, locPosition, message);\r\n//         setCurrentLatLon({ lat, lon });\r\n//       });\r\n//     } else {\r\n//       const locPosition = new kakao.maps.LatLng(\r\n//         currentLatLon.lat,\r\n//         currentLatLon.lon\r\n//       );\r\n//       const message = '현재 위치를 알 수 없어 기본 위치로 이동합니다.';\r\n//       displayMarker(map, locPosition, message);\r\n//     }\r\n//   };\r\n\r\n//   const displayMarker = (map, locPosition, message) => {\r\n//     const imageSize = new kakao.maps.Size(24, 35);\r\n//     const markerImage = new kakao.maps.MarkerImage(\r\n//       'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png',\r\n//       imageSize\r\n//     );\r\n\r\n//     const marker = new window.kakao.maps.Marker({\r\n//       map: map,\r\n//       position: locPosition,\r\n//       image: markerImage\r\n//     });\r\n\r\n//     const infowindow = new window.kakao.maps.InfoWindow({\r\n//       content: message,\r\n//       removable: true\r\n//     });\r\n\r\n//     infowindow.open(map, marker);\r\n//     map.setCenter(locPosition);\r\n//   };\r\n\r\n//   const searchPlaces = () => {\r\n//     if (!keyword.trim()) {\r\n//       alert('키워드를 입력해주세요.');\r\n//       return;\r\n//     }\r\n\r\n//     const ps = new window.kakao.maps.services.Places();\r\n//     ps.keywordSearch(keyword, placesSearchCB);\r\n//   };\r\n\r\n//   const placesSearchCB = (data, status, pagination) => {\r\n//     if (status === window.kakao.maps.services.Status.OK) {\r\n//       displayPlaces(data);\r\n//       displayPagination(pagination);\r\n//     } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\r\n//       setSearchResult([]);\r\n//       alert('검색 결과가 존재하지 않습니다.');\r\n//     } else if (status === window.kakao.maps.services.Status.ERROR) {\r\n//       setSearchResult([]);\r\n//       alert('검색 결과 중 오류가 발생했습니다.');\r\n//     }\r\n//   };\r\n\r\n//   const displayPlaces = (places) => {\r\n//     setSearchResult(places);\r\n//     const bounds = new window.kakao.maps.LatLngBounds();\r\n\r\n//     places.forEach((place) => {\r\n//       const placePosition = new window.kakao.maps.LatLng(place.y, place.x);\r\n//       bounds.extend(placePosition);\r\n//     });\r\n\r\n//     map.setBounds(bounds);\r\n//   };\r\n\r\n//   const displayPagination = (pagination) => {\r\n//     // 페이징 처리 구현 (생략)\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"map_wrap\">\r\n//       <div id=\"map\" style={{ width: '100%', height: '600px', position: 'relative', overflow: 'hidden' }}></div>\r\n//       <div id=\"menu_wrap\" className=\"bg_white\">\r\n//         <div className=\"option\">\r\n//           <div>\r\n//             <form onSubmit={searchPlaces}>\r\n//               <input type=\"text\" placeholder=\"키워드\" value={keyword} onChange={(e) => setKeyword(e.target.value)} />\r\n//               <button type=\"submit\">검색</button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//         <hr />\r\n//         <ul>\r\n//           {searchResult.map((place, index) => (\r\n//             <li key={index}>\r\n//               <span className={`markerbg marker_${index + 1}`}></span>\r\n//               <div className=\"info\">\r\n//                 <h5>{place.place_name}</h5>\r\n//                 {place.road_address_name ? (\r\n//                   <div>\r\n//                     <span>{place.road_address_name}</span>\r\n//                     <span className=\"jibun gray\">{place.address_name}</span>\r\n//                   </div>\r\n//                 ) : (\r\n//                   <span>{place.address_name}</span>\r\n//                 )}\r\n//                 <span className=\"tel\">{place.phone}</span>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//         <div id=\"pagination\"></div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MapPage;\r\n\r\n\r\n// // import React, { useEffect, useState } from 'react';\r\n\r\n// // // ① 클릭 시 움직이는 마커 배열 = clickDynamicMarkers (내가 원하는 곳 클릭하기)\r\n// // // ② 검색 시 정해진 음식점 마커 배열 = searchStaticMarkers (고정적으로 값 뜨게 하기)\r\n\r\n// // const MapPage = () => {\r\n// //     const [searchStaticMarkers, setSearchStaticMarkers] = useState([]);\r\n// //     const [centerMarker, setCenterMarker] = useState(null); // Center marker state\r\n// //     const [searchKeyword, setSearchKeyword] = useState(''); // 검색어 상태 추가\r\n// //     let kakao; // kakao 변수를 전역으로 정의\r\n\r\n// //     // 검색 결과를 표시하기 전에 기존 마커들을 지도에서 제거하는 함수를 정의합니다.\r\n// //     const removeSearchStaticMarkers = () => {\r\n// //         searchStaticMarkers.forEach((marker) => marker.setMap(null));\r\n// //         setSearchStaticMarkers([]);\r\n// //     };\r\n\r\n// //     useEffect(() => {\r\n// //         // 카카오 맵 API 스크립트를 동적으로 불러옵니다\r\n// //         const script = document.createElement('script');\r\n// //         script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=0560729fbda53d06035a69b6f812c484&libraries=services';\r\n// //         script.async = true;\r\n// //         document.body.appendChild(script);\r\n\r\n// //         script.onload = () => {\r\n// //             // 카카오 맵 API 스크립트가 로드되면, 지도를 초기화합니다\r\n// //             initializeMap();\r\n// //         };\r\n\r\n// //         // 컴포넌트 언마운트 시 스크립트 정리(clean-up)\r\n// //         return () => {\r\n// //             document.body.removeChild(script);\r\n// //         };\r\n// //     }, []);\r\n\r\n// //     const initializeMap = () => {\r\n// //         // kakao 변수에 카카오 맵 API를 할당\r\n// //         kakao = window.kakao;\r\n\r\n// //         // 초기 지도 설정\r\n// //         const mapOption = {\r\n// //             center: new kakao.maps.LatLng(37.297764, 127.069340),\r\n// //             level: 4\r\n// //         };\r\n\r\n// //         // 지도 생성\r\n// //         const map = new kakao.maps.Map(document.getElementById('map'), mapOption);\r\n\r\n// //         // 마커 생성\r\n// //         const centerMarker = new kakao.maps.Marker({\r\n// //             position: map.getCenter()\r\n// //         });\r\n\r\n// //         // 마커 지도에 표시\r\n// //         centerMarker.setMap(map);\r\n\r\n// //         // 클릭 이벤트 등록\r\n// //         kakao.maps.event.addListener(map, 'click', function(mouseEvent) {\r\n// //             const latlng = mouseEvent.latLng;\r\n// //             centerMarker.setPosition(latlng);\r\n// //             // 클릭한 위도, 경도 정보를 가져옵니다\r\n// //             const lat = latlng.getLat();\r\n// //             const lng = latlng.getLng();\r\n// //             // 클릭한 위치 정보 표시\r\n// //             const clickDynamicMarkers = document.getElementById('click_dynamic_markers');\r\n// //             clickDynamicMarkers.innerHTML = `클릭 위치: 위도 ${lat}, 경도 ${lng}`;\r\n// //         });\r\n\r\n// //         // CenterMarker 상태 업데이트\r\n// //         setCenterMarker(centerMarker);\r\n// //     };\r\n\r\n// //     // 검색어 입력을 처리하는 함수\r\n// //     const handleKeywordChange = (event) => {\r\n// //         setSearchKeyword(event.target.value);\r\n// //     };\r\n\r\n\r\n// //     // 검색 함수 정의\r\n// //     const searchPlaces = () => {\r\n// //         const keyword = searchKeyword;\r\n// //         // const keyword = document.getElementById('map_keyword').value;\r\n// //         // 장소 검색 API 호출\r\n// //         kakao.maps.services.places.keywordSearch(keyword, (result, status) => {\r\n// //             if (status === kakao.maps.services.Status.OK) {\r\n// //                 // 검색 결과를 표시하기 전에 기존 마커들을 지도에서 제거합니다.\r\n// //                 removeSearchStaticMarkers();\r\n        \r\n// //                 // 새로운 검색 결과를 표시합니다.\r\n// //                 displayPlaces(result);\r\n// //             } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n// //                 alert('검색 결과가 없습니다.');\r\n// //             } else if (status === kakao.maps.services.Status.ERROR) {\r\n// //                 alert('검색 결과 중 오류가 발생했습니다.');\r\n// //             }\r\n// //         });\r\n// //     };\r\n\r\n// //     const displayPlaces = (places) => {\r\n// //          // 검색 결과를 표시할 요소를 가져옵니다.\r\n// //         const placesList = document.getElementById('places_list');\r\n\r\n// //         // 요소가 존재하지 않는다면 함수를 종료합니다.\r\n// //         if (!placesList) {\r\n// //             return;\r\n// //         }\r\n        \r\n// //         // 검색 결과로 받아온 places 배열을 활용하여 마커와 검색 결과 목록을 생성합니다.\r\n// //         const map = centerMarker.getMap();\r\n// //         const bounds = new kakao.maps.LatLngBounds();\r\n\r\n// //         places.forEach((place) => {\r\n// //             const marker = new kakao.maps.Marker({\r\n// //             position: new kakao.maps.LatLng(place.y, place.x),\r\n// //         });\r\n\r\n// //         marker.setMap(map);\r\n\r\n// //         // 새로운 마커들을 searchStaticMarkers 배열에 추가합니다.\r\n// //         setSearchStaticMarkers((prevMarkers) => [...prevMarkers, marker]);\r\n\r\n// //         // 검색 결과 목록을 생성하여 places_list에 추가합니다.\r\n// //         const item = document.createElement('li');\r\n// //         const title = document.createElement('h5');\r\n// //         const info = document.createElement('p');\r\n// //         title.textContent = place.place_name;\r\n// //         info.textContent = place.address_name;\r\n// //         item.appendChild(title);\r\n// //         item.appendChild(info);\r\n// //         item.addEventListener('click', () => {\r\n// //             map.panTo(new kakao.maps.LatLng(place.y, place.x));\r\n// //         });\r\n// //         document.getElementById('places_list').appendChild(item);\r\n\r\n// //         bounds.extend(new kakao.maps.LatLng(place.y, place.x));\r\n// //     });\r\n\r\n// //         // 검색 결과로 받아온 장소들이 모두 표시될 수 있도록 지도의 확대, 이동 조정\r\n// //         map.setBounds(bounds);\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className=\"map_wrap\">\r\n// //             <style>\r\n// //             {`\r\n// //                 .map_wrap,\r\n// //                 .map_wrap * {\r\n// //                     margin:0;\r\n// //                     padding:0;\r\n// //                     font-family:'Malgun Gothic', dotum,'돋움', sans-serif;\r\n// //                     font-size:12px;\r\n// //                 }\r\n                \r\n// //                 .map_wrap a,\r\n// //                 .map_wrap a:hover,\r\n// //                 .map_wrap a:active {\r\n// //                     color: #cacaca;;\r\n// //                     text-decoration: none;\r\n// //                 }\r\n                \r\n// //                 .map_wrap {\r\n// //                     position:relative;\r\n// //                     width:100%;\r\n// //                     height:800px;\r\n// //                 }\r\n                \r\n// //                 #map_keyword {\r\n// //                     width: 100px;\r\n// //                     height: 20px;\r\n// //                     padding: 10px;\r\n// //                     font-size: 12px;\r\n// //                     border: 1px solid #ccc;\r\n// //                     border-radius: 5px;\r\n// //                 }\r\n                \r\n// //                 #menu_wrap {\r\n// //                     position:absolute;\r\n// //                     top:0;\r\n// //                     left:0;\r\n// //                     bottom:0;\r\n// //                     width:250px;\r\n// //                     margin:10px 0 30px 10px;\r\n// //                     padding:5px;\r\n// //                     overflow-y:auto;\r\n// //                     background:rgba(255, 255, 255, 0.7);\r\n// //                     z-index: 1;\r\n// //                     font-size:12px;\r\n// //                     border-radius: 10px;\r\n// //                 }\r\n                \r\n// //                 .bg_white {\r\n// //                     background:#fff;\r\n// //                 }\r\n                \r\n// //                 #menu_wrap hr {\r\n// //                     display: block;\r\n// //                     height: 1px;\r\n// //                     border: 0;\r\n// //                     border-top: 2px solid #5F5F5F;\r\n// //                     margin:3px 0;\r\n// //                 }\r\n                \r\n// //                 #menu_wrap .option{\r\n// //                     position: relative;\r\n// //                     text-align: center;\r\n// //                 }\r\n                \r\n// //                 #menu_wrap .option p {\r\n// //                     margin:10px 0;\r\n// //                 }\r\n                \r\n// //                 #menu_wrap .option button {\r\n// //                     margin: 2px, 3px, 2px, 5px;\r\n// //                     padding: 10px 10px 10px 10px;\r\n// //                     background-color: #ff6480;\r\n// //                     color: #ffffff;\r\n// //                     border: none;\r\n// //                     border-radius: 3px;\r\n// //                     cursor: pointer;\r\n// //                 }\r\n                \r\n// //                 #menu_wrap .option button:hover {\r\n// //                     background-color: #c28175;\r\n// //                 }\r\n                \r\n// //                 #places_list li {\r\n// //                     list-style: none;\r\n// //                 }\r\n                \r\n// //                 #places_list .item {\r\n// //                     position:relative;\r\n// //                     border-bottom:1px solid #888;\r\n// //                     overflow: hidden;\r\n// //                     cursor: pointer;\r\n// //                     min-height: 65px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item span {\r\n// //                     display: block;\r\n// //                     margin-top:4px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item h5, #places_list .item .info {\r\n// //                     text-overflow: ellipsis;\r\n// //                     overflow: hidden;\r\n// //                     white-space: nowrap;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .info{\r\n// //                     padding:10px 0 10px 55px;\r\n// //                 }\r\n                \r\n// //                 #places_list .info .gray {\r\n// //                     color:#8a8a8a;\r\n// //                 }\r\n                \r\n// //                 #places_list .info .jibun {\r\n// //                     padding-left:26px;\r\n// //                     background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;\r\n// //                 }\r\n                \r\n// //                 #places_list .info .tel {\r\n// //                     color:#009900;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .markerbg {\r\n// //                     float:left;\r\n// //                     position:absolute;\r\n// //                     width:36px;\r\n// //                     height:37px;\r\n// //                     margin:10px 0 0 10px;\r\n// //                     background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png) no-repeat;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_1 {\r\n// //                     background-position: 0 -10px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_2 {\r\n// //                     background-position: 0 -56px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_3 {\r\n// //                     background-position: 0 -102px\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_4 {\r\n// //                     background-position: 0 -148px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_5 {\r\n// //                     background-position: 0 -194px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_6 {\r\n// //                     background-position: 0 -240px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_7 {\r\n// //                     background-position: 0 -286px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_8 {\r\n// //                     background-position: 0 -332px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_9 {\r\n// //                     background-position: 0 -378px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_10 {\r\n// //                     background-position: 0 -423px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_11 {\r\n// //                     background-position: 0 -470px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_12 {\r\n// //                     background-position: 0 -516px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_13 {\r\n// //                     background-position: 0 -562px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_14 {\r\n// //                     background-position: 0 -608px;\r\n// //                 }\r\n                \r\n// //                 #places_list .item .marker_15 {\r\n// //                     background-position: 0 -654px;\r\n// //                 }\r\n                \r\n// //                 #pagination {\r\n// //                     margin:10px auto;text-align: center;\r\n// //                 }\r\n                \r\n// //                 #pagination a {\r\n// //                     display:inline-block;margin-right:10px;\r\n// //                 }\r\n                \r\n// //                 #pagination .on {\r\n// //                     font-weight: bold; cursor: default;color:#777;\r\n// //                 }\r\n// //                 `}\r\n// //         </style>\r\n// //         <div id=\"map\" style={{ width: '100%', height: '600px', position: 'relative', overflow: 'hidden' }}></div>\r\n// //             <div id=\"menu_wrap\" className=\"bg_white\">\r\n// //                 <div className=\"option\">\r\n// //                     <div>\r\n// //                         <div id=\"click_dynamic_markers\"></div>\r\n// //                         <form onSubmit={searchPlaces}>\r\n// //                             <input type=\"text\" placeholder=\"키워드\" id=\"map_keyword\" size=\"15\" value={searchKeyword} onChange={handleKeywordChange} />\r\n// //                             <button type=\"submit\">검색</button>\r\n// //                         </form>\r\n// //                     </div>\r\n// //                 </div>\r\n// //                 <hr />\r\n// //                 <ul id=\"places_list\"></ul>\r\n// //                 <div id=\"pagination\"></div>\r\n// //             </div>\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default MapPage;\r\n\r\n/////////////////////////////////////////////////////////////\r\n\r\n// import { configureStore, createSlice } from '@reduxjs/toolkit';\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { useNavigate, Link } from 'react-router-dom';\r\n// import LeftPart from './LeftPart';\r\n\r\n// const historyKeywordsAddDelete = createSlice({\r\n//     name: 'historyKeywords',\r\n//     initialState: [],\r\n//     reducers: {\r\n//       addKeyword: (state, action) => {\r\n//         state.push(action.payload);\r\n//       },\r\n//       deleteAllKeywords: (state) => {\r\n//         state.length = 0;\r\n//       },\r\n//       deleteOneKeyword: (state, action) => {\r\n//         return state.filter((keyword) => keyword !== action.payload);\r\n//       },\r\n//     },\r\n//   });\r\n  \r\n//   export const { addKeyword, deleteAllKeywords, deleteOneKeyword } = historyKeywordsAddDelete.actions;\r\n  \r\n//   const historyKeywordsReducer = historyKeywordsAddDelete.reducer;\r\n  \r\n//   const store = configureStore({\r\n//     reducer: {\r\n//       historyKeywords: historyKeywordsReducer,\r\n//     },\r\n//   });\r\n\r\n// // MainPage는 크게 세 부분으로 나뉨\r\n// // LeftPart는 Left.js에 있으며, 왼쪽 사이드 바를 의미함\r\n// // MiddlePart는 여기 App.js에 있으며, Flavor 로고와 검색 창(기록까지)을 묶어놓은 것을 의미함\r\n// // RightPart도 여기 App.js에 있으며, 로그인 & 회원가입 버튼과 스위치 버튼을 함께 묶어놓은 것을 의미함\r\n\r\n// function MainPage() {\r\n//     const recentSearchBoxStyle = `\r\n//       .no_recent_search {\r\n//         /* \"최신 검색어가 없습니다.\" 메시지에 대한 커스텀 스타일 */\r\n//         display: flex;\r\n//         justify-content: center;\r\n//         align-items: center;\r\n//         height: 100px; /* 필요에 따라 높이를 조정하세요 */\r\n//         font-size: 20px; /* 필요에 따라 폰트 크기를 조정하세요 */\r\n//         color: gray; /* 필요에 따라 색상을 조정하세요 */\r\n//       }\r\n\r\n//       .main_keyword_button {\r\n//         position: absolute;\r\n//         bottom: -200px;\r\n//         left: 50%;\r\n//         transform: translateX(-50%);\r\n//       }\r\n//     `;\r\n  \r\n//     const [isSwitchChecked, setSwitchChecked] = useState(false);\r\n//     const [showPopup, setShowPopup] = useState(false);\r\n//     const [map, setMap] = useState(null);\r\n\r\n//     const navigate = useNavigate();\r\n\r\n//     // const [isSearchBoxVisible, setSearchBoxVisible] = useState(false);\r\n\r\n//     // const toggleSearchBox = () => {\r\n//     //   setSearchBoxVisible(!isSearchBoxVisible);\r\n//     // };\r\n  \r\n//     const handleSwitchToggle = () => {\r\n//       setSwitchChecked(!isSwitchChecked);\r\n//       if (!isSwitchChecked) {\r\n//         // requestUserLocation();\r\n//         setShowPopup(true);\r\n//       }\r\n//     };\r\n\r\n//     // 팝업창에서 지도를 생성하는 함수\r\n//     const createMapInPopup = () => {\r\n//       // Kakao Maps 스크립트를 동적으로 로드\r\n//       const script = document.createElement('script');\r\n//       script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=YOUR_KAKAO_MAPS_APP_KEY';\r\n//       script.async = true;\r\n//       script.onload = () => {\r\n//         const mapOptions = {\r\n//           center: new window.kakao.maps.LatLng(37.5662952, 126.9779451), // 초기 지도 중심 좌표\r\n//           level: 3, // 초기 줌 레벨\r\n//         };\r\n\r\n//         // 지도를 생성하고 팝업 내에 추가\r\n//         const mapInstance = new window.kakao.maps.Map(\r\n//           document.getElementById('popup_map'), // 팝업 내에 지도를 표시할 DOM 요소\r\n//           mapOptions\r\n//         );\r\n//         setMap(mapInstance);\r\n//       };\r\n//       document.head.appendChild(script);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//       createMapInPopup();\r\n//     }, []);\r\n  \r\n//     // 위치 정보를 가져오고 지도의 중심을 사용자의 위치로 이동\r\n//     // const requestUserLocation = () => {\r\n//     //   if (navigator.geolocation && map !== null) {\r\n//     //     navigator.geolocation.getCurrentPosition(\r\n//     //       function (position) {\r\n//     //         const latitude = position.coords.latitude;\r\n//     //         const longitude = position.coords.longitude;\r\n\r\n//     //         // 사용자의 위치로 지도의 중심을 설정\r\n//     //         map.setCenter(new window.kakao.maps.LatLng(latitude, longitude));\r\n\r\n//     //         // 사용자의 위치를 표시하는 마커를 추가할 수도 있습니다\r\n//     //         const userMarker = new window.kakao.maps.Marker({\r\n//     //           position: new window.kakao.maps.LatLng(latitude, longitude),\r\n//     //           map: map,\r\n//     //           image: new window.kakao.maps.MarkerImage(\r\n//     //             '사용자 마커 이미지 URL',\r\n//     //             new window.kakao.maps.Size(24, 35),\r\n//     //             {\r\n//     //               offset: new window.kakao.maps.Point(12, 35),\r\n//     //             }\r\n//     //           ),\r\n//     //         });\r\n\r\n//     //         // 위도와 경도를 필요에 따라 사용합니다.\r\n//     //         console.log(`사용자 위치: 위도 ${latitude}, 경도 ${longitude}`);\r\n//     //       },\r\n//     //       function (error) {\r\n//     //         console.error('사용자 위치 가져오기 오류:', error.message);\r\n//     //       }\r\n//     //     );\r\n//     //   } else {\r\n//     //     console.error('귀하의 브라우저에서 Geolocation이 지원되지 않습니다.');\r\n//     //   }\r\n//     // };\r\n\r\n//     const popupAgreeClick = () => {\r\n//       // requestUserLocation();\r\n//       setShowPopup(false);\r\n//       setSwitchChecked(true);\r\n//     };\r\n  \r\n//     const popupDisagreeClick = () => {\r\n//       setShowPopup(false);\r\n//       setSwitchChecked(false);\r\n//     };\r\n  \r\n//     const setRandomFood = () => {\r\n//       var foods = [\"초밥\", \"돈까스\", \"냉모밀\", \"마라탕\", \"삼계탕\", \"치킨\", \"피자\", \"짜장면\", \"짬뽕\", \"탕수육\", \"떡볶이\", \"김치찌개\", \"부대찌개\", \"순두부찌개\", \"삼겹살\",\r\n//       \"쫄면\", \"덮밥\", \"국수\", \"냉면\", \"곱창\", \"닭발\", \"족발\", \"보쌈\", \"스파게티\", \"스파게티\", \"찜닭\", \"갈비\", \"국밥\", \"제육볶음\", \"오징어볶음\", \"라면\", \"햄버거\", \"샌드위치\",\r\n//       \"샐러드\", \"카레\", \"비빔밥\", \"김밥\"];\r\n//       var randomIndex = Math.floor(Math.random()*foods.length);\r\n//       var inputField = document.getElementById(\"randomFood\");\r\n//       inputField.setAttribute(\"placeholder\", \"오늘의 추천 메뉴는 \" + foods[randomIndex] + \"입니다!\");\r\n//     };\r\n  \r\n//     const [keyword, setKeyword] = useState('');\r\n//     const historyKeywords = useSelector((state) => state.historyKeywords);\r\n//     // const [searchListHeight, setSearchListHeight] = useState(0); // 검색어 목록 높이 상태 추가\r\n  \r\n//     const dispatch = useDispatch();\r\n  \r\n//     const handleKeywordChange = (event) => {\r\n//       setKeyword(event.target.value);\r\n//     };\r\n  \r\n//     function handleKeywordSubmit() {\r\n//       if (keyword.trim() !== '') {\r\n//         dispatch(addKeyword(keyword));\r\n//         setKeyword('');\r\n//       }\r\n//     };\r\n  \r\n//     const handleDeleteAllKeywords = () => {\r\n//       dispatch(deleteAllKeywords());\r\n//     };\r\n  \r\n//     const handleDeleteOneKeyword = (keyword) => {\r\n//       dispatch(deleteOneKeyword(keyword));\r\n//     };\r\n    \r\n//     // const renderSearchBox = () => {\r\n//     //   if (isSwitchChecked && isSearchBoxVisible) {\r\n//     //     return (\r\n//     //       <div className=\"search_box_container\">\r\n//     //         <input type=\"text\" className=\"search_box\" id=\"randomFood\" autoComplete=\"off\" value={keyword} onChange={handleKeywordChange} onKeyUp={(event) => {\r\n//     //             if (event.key === 'Enter' || event.target.classList.contains('search_icon')) {\r\n//     //               handleKeywordSubmit();\r\n//     //             }\r\n//     //           }}\r\n//     //         />\r\n//     //         <ul className=\"keyword_list\" style={{ maxHeight: `${searchListHeight}px` }}>\r\n//     //           {historyKeywords.map((keyword) => (\r\n//     //             <li key={keyword}>{keyword}</li>\r\n//     //           ))}\r\n//     //         </ul>\r\n//     //       </div>\r\n//     //     );\r\n//     //   }\r\n//     //   return null;\r\n//     // };\r\n\r\n//     const render = () => {\r\n//       if (historyKeywords.length > 0) {\r\n//         const recentKeywords = historyKeywords.slice(-10).reverse();\r\n//         return (\r\n//           <ul>\r\n//             {recentKeywords.map((keyword) => (\r\n//               <li key={keyword}>\r\n//                 {keyword} <button onClick={() => handleDeleteOneKeyword(keyword)}>x</button>\r\n//               </li>\r\n//             ))}\r\n//             {keyword.trim() !== '' && (\r\n//               <li>\r\n//                 {keyword} <button onClick={addKeywordToList}>x</button>\r\n//               </li>\r\n//             )}\r\n//           </ul>\r\n//         );\r\n//       } else {\r\n//         return (\r\n//           <p className=\"no_recent_search\">최신 검색어가 없습니다.</p>\r\n//         );\r\n//       }\r\n//     };\r\n  \r\n//     // 검색어 추가 함수\r\n//     const addKeywordToList = () => {\r\n//       if (keyword.trim() !== '') {\r\n//         dispatch(addKeyword(keyword));\r\n//         setKeyword('');\r\n//       }\r\n//     };\r\n\r\n//     const handleMainPageButtonClick = () => {\r\n//       navigate('/keywordrecom');\r\n//     }\r\n    \r\n//     return (\r\n//       <div>\r\n//         <head>\r\n//           <meta charSet=\"UTF-8\" />\r\n//           <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\r\n//           <title> 메인 화면 </title>\r\n//           <link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+KR:100,300,400,500,700,900&display=swap\" rel=\"stylesheet\" />\r\n//           <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\r\n//           <style>{recentSearchBoxStyle}</style>\r\n//         </head>\r\n//         <body onLoad={setRandomFood}>\r\n//           <LeftPart/>\r\n//           {/* 메인 페이지의 로고, 검색 창 부분 */}\r\n//           <div className=\"middle_part\">\r\n//             {/* 로고 */}\r\n//             <button type=\"flavor_logo\" className=\"flavor_logo\">\r\n//               <img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FNCkp7%2Fbtshz0iU8wZ%2FGdartd1kgTj0ZXMhJ0IKwk%2Fimg.png\" width=\"415\" height=\"140\" />\r\n//             </button>\r\n//             {/* 검색 부분 묶음 */}\r\n//             <div className=\"search_part\">\r\n//               {/* 검색창 */}\r\n//               <div className=\"search\" id=\"search\">\r\n//                 <input type=\"text\" className=\"search_box\" id=\"randomFood\" autoComplete=\"off\" value={keyword} onChange={handleKeywordChange} onKeyUp={(event) => {\r\n//                   if (event.key === 'Enter' || event.target.classList.contains('search_icon')) {\r\n//                     handleKeywordSubmit();\r\n//                   }\r\n//                 }}/>\r\n//                 {/* <div className=\"real_search_box\" style={{ display: isSwitchChecked ? 'block' : 'none' }}> */}\r\n//                   {/* 실제 검색 창 내용 */}\r\n//                   {/* <input type=\"text\" className=\"search_box\" id=\"randomFood\" autoComplete=\"off\" value={keyword} onChange={handleKeywordChange}\r\n//                     onKeyUp={(event) => {\r\n//                       if (event.key === 'Enter' || event.target.classList.contains('search_icon')) {\r\n//                         handleKeywordSubmit();\r\n//                       }\r\n//                     }}\r\n//                   />\r\n//                 </div> */}\r\n//                 <button type=\"button\" className=\"search_icon\" onClick={handleKeywordSubmit}>\r\n//                   <img src=\"https://cdn.icon-icons.com/icons2/1302/PNG/512/magnifyingglassbrowser_85768.png\" className=\"srh_btn\" width=\"24px\" height=\"24px\" />\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"search_list\">\r\n//               {/* 추천 검색어 */}\r\n//               <div className=\"suggested_search\" id=\"suggested_search\"></div>\r\n//               {/* 최신 검색어 */}\r\n//               {render()}\r\n//             </div>\r\n//             {/* 검색어 모두 지우기 */}\r\n//             <div className=\"delete\">\r\n//               <button type=\"button\" className=\"all_delete\" onClick={handleDeleteAllKeywords}>모두 지우기</button>\r\n//               <button type=\"button\" className=\"keyword_delete\" onClick={handleDeleteOneKeyword}></button>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"main_button\">\r\n//             <button className=\"main_keyword_button\" onClick={handleMainPageButtonClick}>중앙 버튼</button>\r\n//           </div>\r\n//           {/* 메인 페이지의 스위치, 로그인, 회원가입 부분 */}\r\n//           <div className=\"right_part\">\r\n//             {/* 스위치 */}\r\n//             <div className=\"switch\">\r\n//               <input type=\"checkbox\" id=\"sw_btn\" checked={isSwitchChecked} onClick={handleSwitchToggle} />\r\n//               <label htmlFor=\"sw_btn\" className=\"switch_label\">\r\n//                 <span className=\"onf_btn\"></span>\r\n//               </label>\r\n//             </div>\r\n//             <ul className=\"login_and_register\">\r\n//               <li><Link to=\"/login\" className=\"lar\">로그인</Link></li>\r\n//               <li><Link to=\"/signup\" className=\"lar\">회원가입</Link></li>\r\n//             </ul>\r\n//           </div>\r\n//           {/* 위치 수신 동의 팝업창 */}\r\n//           {showPopup && (\r\n//             <div className=\"popup_box\" id=\"popup_box\">\r\n//               {/* 팝업창 내용 */}\r\n//               <div className=\"popup_content\">\r\n//                 <div className=\"popup_text\">'Flavor'이 사용자의 위치에 접근하도록 허용하시겠습니까?</div>\r\n//                 <div className=\"mini_map\" id=\"mini_map\"></div>\r\n//                 <div className=\"popup_actions\">\r\n//                   <button className=\"popup_agree\" onClick={popupAgreeClick}>허용</button>\r\n//                   <button className=\"popup_disagree\" onClick={popupDisagreeClick}>비허용</button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </body>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   export default MainPage;"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}