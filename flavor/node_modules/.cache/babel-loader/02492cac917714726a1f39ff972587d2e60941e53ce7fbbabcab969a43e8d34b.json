{"ast":null,"code":"import { MyInfoPage } from './MyInfoPage.1';\nexport async function fetchAuthcheck(userid, navigate, setIsLoggedIn) {\n  try {\n    const response = await fetch(`http://localhost:3001/authcheck?userid=${userid}`, {\n      credentials: 'include'\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (data.isLogin) {\n        setIsLoggedIn(true);\n      } else {\n        setIsLoggedIn(false);\n        navigate(\"/login\");\n      }\n    } else {\n      console.error('서버에서 로그인 상태를 확인하는 동안 오류 발생:', response.statusText);\n    }\n  } catch (error) {\n    console.error('API 요청 오류:', error);\n  }\n}\nexport async function fetchUserInfo(userid, setUserInfo) {\n  try {\n    const response = await fetch(`http://localhost:3001/myinfo?userid=${userid}`, {\n      credentials: 'include'\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (!data.error) {\n        setUserInfo(data);\n      } else {\n        console.error('사용자 정보 가져오기 오류:', data.error);\n      }\n    } else {\n      console.error('사용자 정보 가져오기 오류:', response.statusText);\n    }\n  } catch (error) {\n    console.error('API 요청 오류:', error);\n  }\n}\nexport default MyInfoPage;","map":{"version":3,"names":["MyInfoPage","fetchAuthcheck","userid","navigate","setIsLoggedIn","response","fetch","credentials","ok","data","json","isLogin","console","error","statusText","fetchUserInfo","setUserInfo"],"sources":["C:/CD_REACT/flavor/flavor/src/MyInfoPage.js"],"sourcesContent":["import { MyInfoPage } from './MyInfoPage.1';\r\n\r\nexport async function fetchAuthcheck(userid, navigate, setIsLoggedIn) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3001/authcheck?userid=${userid}`, {\r\n      credentials: 'include',\r\n    });\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      if (data.isLogin) {\r\n        setIsLoggedIn(true);\r\n      } else {\r\n        setIsLoggedIn(false);\r\n        navigate(\"/login\");\r\n      }\r\n    } else {\r\n      console.error('서버에서 로그인 상태를 확인하는 동안 오류 발생:', response.statusText);\r\n    }\r\n  } catch (error) {\r\n    console.error('API 요청 오류:', error);\r\n  }\r\n}\r\n\r\nexport async function fetchUserInfo(userid, setUserInfo) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3001/myinfo?userid=${userid}`, {\r\n      credentials: 'include',\r\n    });\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      if (!data.error) {\r\n        setUserInfo(data);\r\n      } else {\r\n        console.error('사용자 정보 가져오기 오류:', data.error);\r\n      }\r\n    } else {\r\n      console.error('사용자 정보 가져오기 오류:', response.statusText);\r\n    }\r\n  } catch (error) {\r\n    console.error('API 요청 오류:', error);\r\n  }\r\n}\r\n\r\nexport default MyInfoPage;\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAE3C,OAAO,eAAeC,cAAcA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,aAAa,EAAE;EACpE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,0CAAyCJ,MAAO,EAAC,EAAE;MAC/EK,WAAW,EAAE;IACf,CAAC,CAAC;IACF,IAAIF,QAAQ,CAACG,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChBP,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,MAAM;QACLA,aAAa,CAAC,KAAK,CAAC;QACpBD,QAAQ,CAAC,QAAQ,CAAC;MACpB;IACF,CAAC,MAAM;MACLS,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAER,QAAQ,CAACS,UAAU,CAAC;IACnE;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EACpC;AACF;AAEA,OAAO,eAAeE,aAAaA,CAACb,MAAM,EAAEc,WAAW,EAAE;EACvD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsCJ,MAAO,EAAC,EAAE;MAC5EK,WAAW,EAAE;IACf,CAAC,CAAC;IACF,IAAIF,QAAQ,CAACG,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAI,CAACD,IAAI,CAACI,KAAK,EAAE;QACfG,WAAW,CAACP,IAAI,CAAC;MACnB,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEJ,IAAI,CAACI,KAAK,CAAC;MAC9C;IACF,CAAC,MAAM;MACLD,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAER,QAAQ,CAACS,UAAU,CAAC;IACvD;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EACpC;AACF;AAEA,eAAeb,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}