{"ast":null,"code":"var _jsxFileName = \"C:\\\\CD_REACT\\\\flavor\\\\flavor\\\\src\\\\CreatePostForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreatePostForm() {\n  _s();\n  const [newPost, setNewPost] = useState({\n    title: '',\n    content: ''\n  });\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleCreatePost = async () => {\n    try {\n      if (!newPost.title || !newPost.content) {\n        setError('제목과 내용을 모두 입력해주세요.');\n        return;\n      }\n      const currentDate = new Date().toLocaleString();\n\n      // Axios를 사용하여 서버에 데이터를 전송\n      const response = await axios.post('/createpostform', {\n        title: newPost.title,\n        content: newPost.content,\n        date: currentDate,\n        views: 0 // 초기 조회수는 0으로 설정\n      });\n\n      if (response.data.success) {\n        alert('게시물이 성공적으로 작성되었습니다.');\n        setNewPost({\n          title: '',\n          content: ''\n        });\n        navigate('/boardlist'); // 작성 완료 후 게시물 목록 페이지로 이동\n      } else {\n        alert('게시물 작성 중 오류가 발생했습니다.');\n      }\n    } catch (error) {\n      console.error('API 요청 오류:', error);\n      alert('API 요청 중 오류가 발생했습니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC8C\\uC2DC\\uBB3C \\uC791\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\uC81C\\uBAA9\",\n      value: newPost.title,\n      onChange: e => setNewPost({\n        ...newPost,\n        title: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"\\uB0B4\\uC6A9\",\n      value: newPost.content,\n      onChange: e => setNewPost({\n        ...newPost,\n        content: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreatePost,\n      children: \"\\uC791\\uC131 \\uC644\\uB8CC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(CreatePostForm, \"vrqFH3wMCy1ZwLiZPV6rArPf+fg=\", false, function () {\n  return [useNavigate];\n});\n_c = CreatePostForm;\nexport default CreatePostForm;\n\n// 원래 되던 코드\n/////////////////////////////////////////////////////////////\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// function CreatePostForm({ handleAddPost }) {\n//   const [newPost, setNewPost] = useState({ title: '', content: '' });\n//   const [error, setError] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleCreatePost = () => {\n//     if (!newPost.title || !newPost.content) {\n//       setError('제목과 내용을 모두 입력해주세요.');\n//       return;\n//     }\n\n//     const newId = Date.now();\n//     const newDate = new Date().toLocaleString();\n//     const newViews = 0;\n//     const createdPost = {\n//       id: newId,\n//       title: newPost.title,\n//       date: newDate,\n//       views: newViews,\n//       content: newPost.content,\n//     };\n\n//     handleAddPost(createdPost);\n//     setNewPost({ title: '', content: '' });\n\n//     // 작성 완료 후 게시물 목록 페이지로 이동\n//     navigate('/boardlist');\n//   };\n\n//   return (\n//     <div>\n//       <h2>게시물 작성</h2>\n//       <input\n//         type=\"text\"\n//         placeholder=\"제목\"\n//         value={newPost.title}\n//         onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}\n//       />\n//       <textarea\n//         placeholder=\"내용\"\n//         value={newPost.content}\n//         onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}\n//       />\n//       <button onClick={handleCreatePost}>작성 완료</button>\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n//     </div>\n//   );\n// }\n\n// export default CreatePostForm;\nvar _c;\n$RefreshReg$(_c, \"CreatePostForm\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","CreatePostForm","_s","newPost","setNewPost","title","content","error","setError","navigate","handleCreatePost","currentDate","Date","toLocaleString","response","post","date","views","data","success","alert","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","style","color","_c","$RefreshReg$"],"sources":["C:/CD_REACT/flavor/flavor/src/CreatePostForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction CreatePostForm() {\r\n  const [newPost, setNewPost] = useState({ title: '', content: '' });\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleCreatePost = async () => {\r\n    try {\r\n      if (!newPost.title || !newPost.content) {\r\n        setError('제목과 내용을 모두 입력해주세요.');\r\n        return;\r\n      }\r\n\r\n      const currentDate = new Date().toLocaleString();\r\n\r\n      // Axios를 사용하여 서버에 데이터를 전송\r\n      const response = await axios.post('/createpostform', {\r\n        title: newPost.title,\r\n        content: newPost.content,\r\n        date: currentDate,\r\n        views: 0, // 초기 조회수는 0으로 설정\r\n      });\r\n\r\n      if (response.data.success) {\r\n        alert('게시물이 성공적으로 작성되었습니다.');\r\n        setNewPost({ title: '', content: '' });\r\n        navigate('/boardlist'); // 작성 완료 후 게시물 목록 페이지로 이동\r\n      } else {\r\n        alert('게시물 작성 중 오류가 발생했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('API 요청 오류:', error);\r\n      alert('API 요청 중 오류가 발생했습니다.');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>게시물 작성</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"제목\"\r\n        value={newPost.title}\r\n        onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}\r\n      />\r\n      <textarea\r\n        placeholder=\"내용\"\r\n        value={newPost.content}\r\n        onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}\r\n      />\r\n      <button onClick={handleCreatePost}>작성 완료</button>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreatePostForm;\r\n\r\n// 원래 되던 코드\r\n/////////////////////////////////////////////////////////////\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// function CreatePostForm({ handleAddPost }) {\r\n//   const [newPost, setNewPost] = useState({ title: '', content: '' });\r\n//   const [error, setError] = useState('');\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleCreatePost = () => {\r\n//     if (!newPost.title || !newPost.content) {\r\n//       setError('제목과 내용을 모두 입력해주세요.');\r\n//       return;\r\n//     }\r\n\r\n//     const newId = Date.now();\r\n//     const newDate = new Date().toLocaleString();\r\n//     const newViews = 0;\r\n//     const createdPost = {\r\n//       id: newId,\r\n//       title: newPost.title,\r\n//       date: newDate,\r\n//       views: newViews,\r\n//       content: newPost.content,\r\n//     };\r\n\r\n//     handleAddPost(createdPost);\r\n//     setNewPost({ title: '', content: '' });\r\n\r\n//     // 작성 완료 후 게시물 목록 페이지로 이동\r\n//     navigate('/boardlist');\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>게시물 작성</h2>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"제목\"\r\n//         value={newPost.title}\r\n//         onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}\r\n//       />\r\n//       <textarea\r\n//         placeholder=\"내용\"\r\n//         value={newPost.content}\r\n//         onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}\r\n//       />\r\n//       <button onClick={handleCreatePost}>작성 완료</button>\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CreatePostForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}