{"ast":null,"code":"var _jsxFileName = \"C:\\\\CD_REACT\\\\flavor\\\\flavor\\\\src\\\\MyInfoHeart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyInfoHeart = () => {\n  _s();\n  const userid = 'cdflavor1113';\n  const [restaurantInfo, setRestaurantInfo] = useState(null);\n  const [isFavorite, setIsFavorite] = useState(false); // 기본값 false로 설정\n\n  useEffect(() => {\n    // 클라이언트가 서버로 데이터를 요청\n    fetch('http://localhost:3001/myinfoheart', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userid\n      })\n    }).then(response => response.json()).then(data => {\n      // 서버로부터 받아온 데이터로 상태 설정\n      if (data.restaurantInfo) {\n        setRestaurantInfo(data.restaurantInfo);\n        setIsFavorite(data.isFavorite);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [userid]); // userid가 변경될 때마다 useEffect가 실행되도록 설정\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: restaurantInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\uC74C\\uC2DD\\uC810 \\uC774\\uB984: \", restaurantInfo.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uCC1C\\uD55C \\uC0C1\\uD0DC: \", isFavorite ? '찜한 상태' : '찜하지 않은 상태']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uCC1C \\uBAA9\\uB85D\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(MyInfoHeart, \"lO1h6aFJ2M2PAYQ5vDIUIo78MRg=\");\n_c = MyInfoHeart;\nexport default MyInfoHeart;\nvar _c;\n$RefreshReg$(_c, \"MyInfoHeart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MyInfoHeart","_s","userid","restaurantInfo","setRestaurantInfo","isFavorite","setIsFavorite","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","error","console","children","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/CD_REACT/flavor/flavor/src/MyInfoHeart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst MyInfoHeart = () => {\r\n  const userid = 'cdflavor1113';\r\n  const [restaurantInfo, setRestaurantInfo] = useState(null);\r\n  const [isFavorite, setIsFavorite] = useState(false); // 기본값 false로 설정\r\n\r\n  useEffect(() => {\r\n    // 클라이언트가 서버로 데이터를 요청\r\n    fetch('http://localhost:3001/myinfoheart', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ userid }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // 서버로부터 받아온 데이터로 상태 설정\r\n        if (data.restaurantInfo) {\r\n          setRestaurantInfo(data.restaurantInfo);\r\n          setIsFavorite(data.isFavorite);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, [userid]); // userid가 변경될 때마다 useEffect가 실행되도록 설정\r\n\r\n  return (\r\n    <div>\r\n      {restaurantInfo ? (\r\n        <div>\r\n          <h2>음식점 이름: {restaurantInfo.title}</h2>\r\n          <p>찜한 상태: {isFavorite ? '찜한 상태' : '찜하지 않은 상태'}</p>\r\n          {/* 받은 정보를 이용한 다른 작업 */}\r\n        </div>\r\n      ) : (\r\n        <p>찜 목록이 없습니다.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyInfoHeart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,MAAM,GAAG,cAAc;EAC7B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErDC,SAAS,CAAC,MAAM;IACd;IACAU,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV;MAAO,CAAC;IACjC,CAAC,CAAC,CACCW,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd;MACA,IAAIA,IAAI,CAACb,cAAc,EAAE;QACvBC,iBAAiB,CAACY,IAAI,CAACb,cAAc,CAAC;QACtCG,aAAa,CAACU,IAAI,CAACX,UAAU,CAAC;MAChC;IACF,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN,CAAC,EAAE,CAAChB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,oBACEH,OAAA;IAAAqB,QAAA,EACGjB,cAAc,gBACbJ,OAAA;MAAAqB,QAAA,gBACErB,OAAA;QAAAqB,QAAA,GAAI,mCAAQ,EAACjB,cAAc,CAACkB,KAAK;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvC1B,OAAA;QAAAqB,QAAA,GAAG,6BAAO,EAACf,UAAU,GAAG,OAAO,GAAG,WAAW;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE/C,CAAC,gBAEN1B,OAAA;MAAAqB,QAAA,EAAG;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAClB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxB,EAAA,CAxCID,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AA0CjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}